{"ast":null,"code":"import { ethers } from 'ethers';\nimport { setProvider, setNetwork, setAccount } from './reducers/provider';\nimport { setContracts, setSymbols, balancesLoaded } from './reducers/tokens';\nimport { setContract, sharesLoaded, token1Loaded, token2Loaded, swapsLoaded, depositRequest, depositSuccess, depositFail, withdrawRequest, withdrawSuccess, withdrawFail, swapRequest, swapSuccess, swapFail } from './reducers/amm';\nimport TOKEN_ABI from '../abis/Token.json';\nimport AMM_ABI from '../abis/AMM.json';\nimport AGGREGATOR_ABI from '../abis/Aggregator.json';\nimport config from '../config.json';\nexport const loadProvider = dispatch => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  dispatch(setProvider(provider));\n  return provider;\n};\nexport const loadNetwork = async (provider, dispatch) => {\n  const {\n    chainId\n  } = await provider.getNetwork();\n  dispatch(setNetwork(chainId));\n  return chainId;\n};\nexport const loadAccount = async dispatch => {\n  const accounts = await window.ethereum.request({\n    method: 'eth_requestAccounts'\n  });\n  const account = ethers.utils.getAddress(accounts[0]);\n  dispatch(setAccount(account));\n  return account;\n}; // ------------------------------------------------------------------------------\n// LOAD CONTRACTS\n\nexport const loadTokens = async (provider, chainId, dispatch) => {\n  const dapp = new ethers.Contract(config[chainId].dapp.address, TOKEN_ABI, provider);\n  const usd = new ethers.Contract(config[chainId].usd.address, TOKEN_ABI, provider);\n  dispatch(setContracts([dapp, usd]));\n  dispatch(setSymbols([await dapp.symbol(), await usd.symbol()]));\n};\nexport const loadAMM = async (provider, chainId, dispatch) => {\n  const amm = new ethers.Contract(config[chainId].amm.address, AMM_ABI, provider);\n  dispatch(setContract(amm));\n  return amm;\n  const appleswap = new ethers.Contract(config[chainId].appleswap.address, AMM_ABI, provider);\n  dispatch(setContract(appleswap));\n  return appleswap;\n};\nexport const loadAppleSwap = async (provider, chainId, dispatch) => {\n  const appleswap = new ethers.Contract(config[chainId].appleswap.address, AMM_ABI, provider);\n  dispatch(setContract(appleswap));\n  return appleswap;\n}; // ------------------------------------------------------------------------------\n// LOAD BALANCES & SHARES\n\nexport const loadBalances = async (amm, tokens, account, dispatch) => {\n  const balance1 = await tokens[0].balanceOf(account);\n  const balance2 = await tokens[1].balanceOf(account);\n  dispatch(balancesLoaded([ethers.utils.formatUnits(balance1.toString(), 'ether'), ethers.utils.formatUnits(balance2.toString(), 'ether')]));\n  const shares = await amm.shares(account);\n  dispatch(sharesLoaded(ethers.utils.formatUnits(shares.toString(), 'ether')));\n  /*\n   const token1 = await amm.token1Balance()\n  dispatch(token1Loaded(ethers.utils.formatUnits(token1.toString(), 'ether')))\n   const token2 = await amm.token2Balance()\n  dispatch(token2Loaded(ethers.utils.formatUnits(token2.toString(), 'ether')))\n   */\n\n  const yeah = parseFloat(0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1).toFixed(2);\n  const tokenA = await yeah.token1Balance();\n  dispatch(token1Loaded(ethers.utils.formatUnits(tokenA.toString(), 'ether')));\n  const tokenB = await yeah.token2Balance();\n  dispatch(token2Loaded(ethers.utils.formatUnits(tokenB.toString(), 'ether')));\n}; // ------------------------------------------------------------------------------\n// ADD LIQUDITY\n\nexport const addLiquidity = async (provider, amm, tokens, amounts, dispatch) => {\n  try {\n    dispatch(depositRequest());\n    const signer = await provider.getSigner();\n    let transaction;\n    transaction = await tokens[0].connect(signer).approve(amm.address, amounts[0]);\n    await transaction.wait();\n    transaction = await tokens[1].connect(signer).approve(amm.address, amounts[1]);\n    await transaction.wait();\n    transaction = await amm.connect(signer).addLiquidity(amounts[0], amounts[1]);\n    await transaction.wait();\n    dispatch(depositSuccess(transaction.hash));\n  } catch (error) {\n    dispatch(depositFail());\n  }\n}; // ------------------------------------------------------------------------------\n// REMOVE LIQUDITY\n\nexport const removeLiquidity = async (provider, amm, shares, dispatch) => {\n  try {\n    dispatch(withdrawRequest());\n    const signer = await provider.getSigner();\n    let transaction = await amm.connect(signer).removeLiquidity(shares);\n    await transaction.wait();\n    dispatch(withdrawSuccess(transaction.hash));\n  } catch (error) {\n    dispatch(withdrawFail());\n  }\n}; // ------------------------------------------------------------------------------\n// SWAP\n\nexport const swap = async (provider, amm, token, symbol, amount, dispatch) => {\n  try {\n    dispatch(swapRequest());\n    let transaction;\n    const signer = await provider.getSigner();\n    transaction = await token.connect(signer).approve(amm.address, amount);\n    await transaction.wait();\n\n    if (symbol === \"DAPP\") {\n      transaction = await amm.connect(signer).swapToken1(amount);\n    } else {\n      transaction = await amm.connect(signer).swapToken2(amount);\n    }\n\n    await transaction.wait(); // Tell redux that the swap has finished - MISSION COMPLETE\n\n    dispatch(swapSuccess(transaction.hash));\n  } catch (error) {\n    dispatch(swapFail());\n  }\n}; // ------------------------------------------------------------------------------\n// LOAD ALL SWAPS\n\nexport const loadAllSwaps = async (provider, amm, dispatch) => {\n  const block = await provider.getBlockNumber();\n  const swapStream = await amm.queryFilter('Swap', 0, block);\n  const swaps = swapStream.map(event => {\n    return {\n      hash: event.transactionHash,\n      args: event.args\n    };\n  });\n  dispatch(swapsLoaded(swaps));\n};","map":{"version":3,"names":["ethers","setProvider","setNetwork","setAccount","setContracts","setSymbols","balancesLoaded","setContract","sharesLoaded","token1Loaded","token2Loaded","swapsLoaded","depositRequest","depositSuccess","depositFail","withdrawRequest","withdrawSuccess","withdrawFail","swapRequest","swapSuccess","swapFail","TOKEN_ABI","AMM_ABI","AGGREGATOR_ABI","config","loadProvider","dispatch","provider","providers","Web3Provider","window","ethereum","loadNetwork","chainId","getNetwork","loadAccount","accounts","request","method","account","utils","getAddress","loadTokens","dapp","Contract","address","usd","symbol","loadAMM","amm","appleswap","loadAppleSwap","loadBalances","tokens","balance1","balanceOf","balance2","formatUnits","toString","shares","yeah","parseFloat","toFixed","tokenA","token1Balance","tokenB","token2Balance","addLiquidity","amounts","signer","getSigner","transaction","connect","approve","wait","hash","error","removeLiquidity","swap","token","amount","swapToken1","swapToken2","loadAllSwaps","block","getBlockNumber","swapStream","queryFilter","swaps","map","event","transactionHash","args"],"sources":["/home/arcturian/aggregator/src/store/interactions.js"],"sourcesContent":["import { ethers } from 'ethers'\n\nimport {\n  setProvider,\n  setNetwork,\n  setAccount\n} from './reducers/provider'\n\nimport {\n  setContracts,\n  setSymbols,\n  balancesLoaded\n} from './reducers/tokens'\n\nimport {\n  setContract,\n  sharesLoaded,\n  token1Loaded,\n  token2Loaded,\n  swapsLoaded,\n  depositRequest,\n  depositSuccess,\n  depositFail,\n  withdrawRequest,\n  withdrawSuccess,\n  withdrawFail,\n  swapRequest,\n  swapSuccess,\n  swapFail\n} from './reducers/amm'\n\nimport TOKEN_ABI from '../abis/Token.json';\nimport AMM_ABI from '../abis/AMM.json';\nimport AGGREGATOR_ABI from '../abis/Aggregator.json';\nimport config from '../config.json';\n\nexport const loadProvider = (dispatch) => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum)\n  dispatch(setProvider(provider))\n\n  return provider\n}\n\nexport const loadNetwork = async (provider, dispatch) => {\n  const { chainId } = await provider.getNetwork()\n  dispatch(setNetwork(chainId))\n\n  return chainId\n}\n\nexport const loadAccount = async (dispatch) => {\n  const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\n  const account = ethers.utils.getAddress(accounts[0])\n  dispatch(setAccount(account))\n\n  return account\n}\n\n// ------------------------------------------------------------------------------\n// LOAD CONTRACTS\nexport const loadTokens = async (provider, chainId, dispatch) => {\n  const dapp = new ethers.Contract(config[chainId].dapp.address, TOKEN_ABI, provider)\n  const usd = new ethers.Contract(config[chainId].usd.address, TOKEN_ABI, provider)\n\n  dispatch(setContracts([dapp, usd]))\n  dispatch(setSymbols([await dapp.symbol(), await usd.symbol()]))\n}\n\nexport const loadAMM = async (provider, chainId, dispatch) => {\n  const amm = new ethers.Contract(config[chainId].amm.address, AMM_ABI, provider)\n\n  dispatch(setContract(amm))\n\n  return amm\n\n  const appleswap = new ethers.Contract(config[chainId].appleswap.address, AMM_ABI, provider)\n\n  dispatch(setContract(appleswap))\n\n  return appleswap\n}\n\nexport const loadAppleSwap = async (provider, chainId, dispatch) => {\n  const appleswap = new ethers.Contract(config[chainId].appleswap.address, AMM_ABI, provider)\n\n  dispatch(setContract(appleswap))\n\n  return appleswap\n}\n\n\n\n// ------------------------------------------------------------------------------\n// LOAD BALANCES & SHARES\nexport const loadBalances = async (amm, tokens, account, dispatch) => {\n  const balance1 = await tokens[0].balanceOf(account)\n  const balance2 = await tokens[1].balanceOf(account)\n\n  dispatch(balancesLoaded([\n    ethers.utils.formatUnits(balance1.toString(), 'ether'),\n    ethers.utils.formatUnits(balance2.toString(), 'ether')\n  ]))\n\n  const shares = await amm.shares(account)\n  dispatch(sharesLoaded(ethers.utils.formatUnits(shares.toString(), 'ether')))\n\n  /*\n\n  const token1 = await amm.token1Balance()\n  dispatch(token1Loaded(ethers.utils.formatUnits(token1.toString(), 'ether')))\n\n  const token2 = await amm.token2Balance()\n  dispatch(token2Loaded(ethers.utils.formatUnits(token2.toString(), 'ether')))\n\n  */\n\n  const yeah = parseFloat(0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1).toFixed(2)\n\n  const tokenA = await yeah.token1Balance()\n  dispatch(token1Loaded(ethers.utils.formatUnits(tokenA.toString(), 'ether')))\n\n  const tokenB = await yeah.token2Balance()\n  dispatch(token2Loaded(ethers.utils.formatUnits(tokenB.toString(), 'ether')))\n\n}\n\n// ------------------------------------------------------------------------------\n// ADD LIQUDITY\nexport const addLiquidity = async (provider, amm, tokens, amounts, dispatch) => {\n  try {\n    dispatch(depositRequest())\n\n    const signer = await provider.getSigner()\n\n    let transaction\n\n    transaction = await tokens[0].connect(signer).approve(amm.address, amounts[0])\n    await transaction.wait()\n\n    transaction = await tokens[1].connect(signer).approve(amm.address, amounts[1])\n    await transaction.wait()\n\n    transaction = await amm.connect(signer).addLiquidity(amounts[0], amounts[1])\n    await transaction.wait()\n\n    dispatch(depositSuccess(transaction.hash))\n  } catch (error) {\n    dispatch(depositFail())\n  }\n}\n\n// ------------------------------------------------------------------------------\n// REMOVE LIQUDITY\nexport const removeLiquidity = async (provider, amm, shares, dispatch) => {\n  try {\n    dispatch(withdrawRequest())\n\n    const signer = await provider.getSigner()\n\n    let transaction = await amm.connect(signer).removeLiquidity(shares)\n    await transaction.wait()\n\n    dispatch(withdrawSuccess(transaction.hash))\n  } catch (error) {\n    dispatch(withdrawFail())\n  }\n}\n\n// ------------------------------------------------------------------------------\n// SWAP\n\nexport const swap = async (provider, amm, token, symbol, amount, dispatch) => {\n  try {\n\n    dispatch(swapRequest())\n\n    let transaction\n\n    const signer = await provider.getSigner()\n\n    transaction = await token.connect(signer).approve(amm.address, amount)\n    await transaction.wait()\n\n    if (symbol === \"DAPP\") {\n      transaction = await amm.connect(signer).swapToken1(amount)\n    } else {\n      transaction = await amm.connect(signer).swapToken2(amount)\n    }\n\n    await transaction.wait()\n\n    // Tell redux that the swap has finished - MISSION COMPLETE\n\n    dispatch(swapSuccess(transaction.hash))\n\n  } catch (error) {\n    dispatch(swapFail())\n  }\n}\n\n\n// ------------------------------------------------------------------------------\n// LOAD ALL SWAPS\n\nexport const loadAllSwaps = async (provider, amm, dispatch) => {\n  const block = await provider.getBlockNumber()\n\n  const swapStream = await amm.queryFilter('Swap', 0, block)\n  const swaps = swapStream.map(event => {\n    return { hash: event.transactionHash, args: event.args }\n  })\n\n  dispatch(swapsLoaded(swaps))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}